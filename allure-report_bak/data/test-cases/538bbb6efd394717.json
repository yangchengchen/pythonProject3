{
  "uid" : "538bbb6efd394717",
  "name" : "test_login",
  "fullName" : "Web.test_example7.Test_Comm#test_login",
  "historyId" : "756c83ac2bc7f53581e6cd7780528cf7",
  "time" : {
    "start" : 1673433625163,
    "stop" : 1673433625257,
    "duration" : 94
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression https://cdc.test.yuanting.cn/#/login because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string 'https://cdc.test.yuanting.cn/#/login' is not a valid XPath expression.\n  (Session info: chrome=108.0.5359.124)\nStacktrace:\n0   chromedriver                        0x00000001008c1f38 chromedriver + 4910904\n1   chromedriver                        0x0000000100841a03 chromedriver + 4385283\n2   chromedriver                        0x0000000100486747 chromedriver + 472903\n3   chromedriver                        0x000000010048ad28 chromedriver + 490792\n4   chromedriver                        0x000000010048a9f6 chromedriver + 489974\n5   chromedriver                        0x000000010048adfc chromedriver + 491004\n6   chromedriver                        0x00000001004caf63 chromedriver + 753507\n7   chromedriver                        0x00000001004cb5a1 chromedriver + 755105\n8   chromedriver                        0x000000010050ee94 chromedriver + 1031828\n9   chromedriver                        0x00000001004f113d chromedriver + 909629\n10  chromedriver                        0x000000010050c28e chromedriver + 1020558\n11  chromedriver                        0x00000001004f0ee3 chromedriver + 909027\n12  chromedriver                        0x00000001004bb30c chromedriver + 688908\n13  chromedriver                        0x00000001004bc88e chromedriver + 694414\n14  chromedriver                        0x000000010088f1de chromedriver + 4702686\n15  chromedriver                        0x0000000100893b19 chromedriver + 4721433\n16  chromedriver                        0x000000010089b28e chromedriver + 4752014\n17  chromedriver                        0x000000010089491a chromedriver + 4725018\n18  chromedriver                        0x0000000100868b02 chromedriver + 4545282\n19  chromedriver                        0x00000001008b3888 chromedriver + 4851848\n20  chromedriver                        0x00000001008b3a05 chromedriver + 4852229\n21  chromedriver                        0x00000001008c9e5f chromedriver + 4943455\n22  libsystem_pthread.dylib             0x00007ff81bf824f4 _pthread_start + 125\n23  libsystem_pthread.dylib             0x00007ff81bf7e00f thread_start + 15",
  "statusTrace" : "self = <Web.test_example7.Test_Comm object at 0x101c01c10>\n\n    def test_login(self):\n>       self.web.get('https://cdc.test.yuanting.cn/#/login')\n\nWeb/test_example7.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nWeb/webkeys.py:22: in get\n    self.driver.find_element(By.XPATH, locator).get()\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x101c01f40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...ff81bf824f4 _pthread_start + 125\\\\n23  libsystem_pthread.dylib             0x00007ff81bf7e00f thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression https://cdc.test.yuanting.cn/#/login because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string 'https://cdc.test.yuanting.cn/#/login' is not a valid XPath expression.\nE         (Session info: chrome=108.0.5359.124)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001008c1f38 chromedriver + 4910904\nE       1   chromedriver                        0x0000000100841a03 chromedriver + 4385283\nE       2   chromedriver                        0x0000000100486747 chromedriver + 472903\nE       3   chromedriver                        0x000000010048ad28 chromedriver + 490792\nE       4   chromedriver                        0x000000010048a9f6 chromedriver + 489974\nE       5   chromedriver                        0x000000010048adfc chromedriver + 491004\nE       6   chromedriver                        0x00000001004caf63 chromedriver + 753507\nE       7   chromedriver                        0x00000001004cb5a1 chromedriver + 755105\nE       8   chromedriver                        0x000000010050ee94 chromedriver + 1031828\nE       9   chromedriver                        0x00000001004f113d chromedriver + 909629\nE       10  chromedriver                        0x000000010050c28e chromedriver + 1020558\nE       11  chromedriver                        0x00000001004f0ee3 chromedriver + 909027\nE       12  chromedriver                        0x00000001004bb30c chromedriver + 688908\nE       13  chromedriver                        0x00000001004bc88e chromedriver + 694414\nE       14  chromedriver                        0x000000010088f1de chromedriver + 4702686\nE       15  chromedriver                        0x0000000100893b19 chromedriver + 4721433\nE       16  chromedriver                        0x000000010089b28e chromedriver + 4752014\nE       17  chromedriver                        0x000000010089491a chromedriver + 4725018\nE       18  chromedriver                        0x0000000100868b02 chromedriver + 4545282\nE       19  chromedriver                        0x00000001008b3888 chromedriver + 4851848\nE       20  chromedriver                        0x00000001008b3a05 chromedriver + 4852229\nE       21  chromedriver                        0x00000001008c9e5f chromedriver + 4943455\nE       22  libsystem_pthread.dylib             0x00007ff81bf824f4 _pthread_start + 125\nE       23  libsystem_pthread.dylib             0x00007ff81bf7e00f thread_start + 15\n\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:249: InvalidSelectorException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_class_fixture_Test_Comm",
    "time" : {
      "start" : 1673433620021,
      "stop" : 1673433625161,
      "duration" : 5140
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "_xunit_setup_class_fixture_Test_Comm::0",
    "time" : {
      "start" : 1673433625294,
      "stop" : 1673433629310,
      "duration" : 4016
    },
    "status" : "broken",
    "statusMessage" : "AttributeError: type object 'Test_Comm' has no attribute 'driver'\n",
    "statusTrace" : "  File \"/Users/a00/Library/Python/3.8/lib/python/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/Users/a00/Library/Python/3.8/lib/python/site-packages/_pytest/fixtures.py\", line 916, in _teardown_yield_fixture\n    next(it)\n  File \"/Users/a00/Library/Python/3.8/lib/python/site-packages/_pytest/python.py\", line 868, in xunit_setup_class_fixture\n    _call_with_optional_argument(func, self.obj)\n  File \"/Users/a00/Library/Python/3.8/lib/python/site-packages/_pytest/python.py\", line 786, in _call_with_optional_argument\n    func(arg)\n  File \"/Users/a00/PycharmProjects/pythonProject3/Web/test_example7.py\", line 14, in teardown_class\n    self.driver.quit()\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Web"
  }, {
    "name" : "suite",
    "value" : "test_example7"
  }, {
    "name" : "subSuite",
    "value" : "Test_Comm"
  }, {
    "name" : "host",
    "value" : "00demacbook-pro"
  }, {
    "name" : "thread",
    "value" : "8746-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Web.test_example7"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "538bbb6efd394717.json",
  "parameterValues" : [ ]
}